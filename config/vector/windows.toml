# Ultra-performance Vector configuration for Windows SIEM

# Data directory
data_dir = "/var/lib/vector"

# API configuration
[api]
enabled = true
address = "0.0.0.0:8686"

# Log schema
[log_schema]
host_key = "hostname"
timestamp_key = "timestamp"
message_key = "message"

# Sources - Windows Event Logs
[sources.windows_security]
type = "windows_event_logs"
log_name = "Security"
query = "*[System[(EventID=4624) or (EventID=4625) or (EventID=4648) or (EventID=4672)]]"
batch_timeout = 1.0

[sources.windows_system]
type = "windows_event_logs"
log_name = "System"
query = "*[System[(Level=1) or (Level=2) or (Level=3)]]"
batch_timeout = 1.0

[sources.windows_application]
type = "windows_event_logs"
log_name = "Application"
query = "*[System[(Level=1) or (Level=2)]]"
batch_timeout = 1.0

# Source - HTTP endpoints for custom logs
[sources.http_endpoint]
type = "http"
address = "0.0.0.0:8080"
method = ["POST", "PUT"]
path = "/events"

# Source - File monitoring
[sources.iis_logs]
type = "file"
include = ["C:\\inetpub\\logs\\LogFiles\\**\\*.log"]
ignore_older_secs = 600
multiline.start_pattern = '^\d{4}-\d{2}-\d{2}'
multiline.mode = "halt_before"

[sources.custom_app_logs]
type = "file"
include = ["C:\\Logs\\**\\*.log", "C:\\Applications\\**\\*.log"]
ignore_older_secs = 300

# Transforms - Parse and enrich
[transforms.parse_security_events]
type = "remap"
inputs = ["windows_security"]
source = '''
# Parse Windows Security events
.event_id = .EventID
.computer = .Computer
.user = .Security.UserID

# Detect authentication events
if .event_id == 4624 {
    .event_type = "successful_login"
    .threat_level = 1
} else if .event_id == 4625 {
    .event_type = "failed_login"
    .threat_level = 3
} else if .event_id == 4648 {
    .event_type = "explicit_logon"
    .threat_level = 2
} else if .event_id == 4672 {
    .event_type = "admin_login"
    .threat_level = 4
}

# Extract source IP if available
if exists(.EventData.IpAddress) {
    .source_ip = .EventData.IpAddress
} else {
    .source_ip = "unknown"
}

# Calculate threat score
.threat_score = .threat_level * 0.25
'''

[transforms.parse_iis_logs]
type = "remap"
inputs = ["iis_logs"]
source = '''
# Parse IIS W3C Extended Log Format
fields = split(.message, " ")
.timestamp = parse_timestamp!(fields[0] + " " + fields[1], "%Y-%m-%d %H:%M:%S")
.client_ip = fields[2]
.method = fields[3]
.uri = fields[4]
.query = fields[5]
.status_code = to_int(fields[8]) ?? 0
.bytes_sent = to_int(fields[9]) ?? 0
.user_agent = fields[12]

# Threat detection patterns
.threat_detected = false
.threat_type = "unknown"

# XSS detection
if match(.uri, r"(?i)<script|javascript:|eval\(|onload=") ||
   match(.query, r"(?i)<script|javascript:|eval\(|onload=") {
    .threat_detected = true
    .threat_type = "xss"
    .threat_score = 0.85
}

# SQL injection detection
if match(.uri, r"(?i)union\s+select|;\s*drop\s+table|1\s*=\s*1|'.*'") ||
   match(.query, r"(?i)union\s+select|;\s*drop\s+table|1\s*=\s*1|'.*'") {
    .threat_detected = true
    .threat_type = "sql_injection"
    .threat_score = 0.90
}

# Path traversal detection
if match(.uri, r"\.\.\/|\.\.\\|%2e%2e%2f|%2e%2e%5c") {
    .threat_detected = true
    .threat_type = "path_traversal"
    .threat_score = 0.75
}

# Large request detection
if length(.uri) + length(.query) > 2048 {
    .threat_detected = true
    .threat_type = "large_request"
    .threat_score = 0.60
}
'''

[transforms.enrich_events]
type = "remap"
inputs = ["parse_security_events", "parse_iis_logs", "windows_system", "windows_application"]
source = '''
# Add common fields
.hostname = get_hostname!()
.timestamp = now()
.pipeline = "vector-windows"

# GeoIP enrichment for IP addresses
if exists(.source_ip) && .source_ip != "unknown" && .source_ip != "127.0.0.1" {
    .geoip = get_geoip(.source_ip)
}

# Add severity based on threat score
if exists(.threat_score) {
    if .threat_score >= 0.8 {
        .severity = "critical"
    } else if .threat_score >= 0.6 {
        .severity = "high"  
    } else if .threat_score >= 0.4 {
        .severity = "medium"
    } else {
        .severity = "low"
    }
} else {
    .severity = "info"
}
'''

[transforms.filter_threats]
type = "filter"
inputs = ["enrich_events"]
condition = '.threat_detected == true || .severity == "critical" || .severity == "high"'

# Sinks - Output to NATS
[sinks.nats_threats]
type = "nats"
inputs = ["filter_threats"]
url = "nats://nats:4222"
subject = "threats.detected"
auth.strategy = "user_password"
auth.user = "collector"
auth.password = "${NATS_COLLECTOR_PASSWORD}"

# Compression for high throughput
compression = "gzip"
batch.max_events = 1000
batch.timeout_secs = 1

[sinks.nats_all_events]
type = "nats"
inputs = ["enrich_events"]
url = "nats://nats:4222"
subject = "events.windows"
auth.strategy = "user_password"
auth.user = "collector" 
auth.password = "${NATS_COLLECTOR_PASSWORD}"

# Batch configuration for performance
batch.max_events = 5000
batch.timeout_secs = 5

# Debug sink for troubleshooting
[sinks.debug_console]
type = "console"
inputs = ["filter_threats"]
encoding.codec = "json"

# Metrics sink
[sinks.metrics]
type = "prometheus_exporter"
address = "0.0.0.0:9090"
default_namespace = "vector"

# Health check endpoint
[sinks.health_check]
type = "http"
uri = "http://healthcheck:8080/vector"
method = "POST"
inputs = ["enrich_events"]
encoding.codec = "json"
batch.max_events = 1
batch.timeout_secs = 30 