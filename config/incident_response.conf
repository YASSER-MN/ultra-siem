# Ultra SIEM Phase 4: Incident Response & Alerting Configuration
# Enterprise-grade automated response and real-time alerting

[general]
# General incident response settings
enabled = true
version = "1.0.0"
log_level = "info"
max_concurrent_incidents = 1000
incident_retention_days = 365
auto_cleanup_enabled = true
cleanup_interval_hours = 24

# Performance settings
max_response_time_ms = 5000
alert_queue_size = 10000
response_queue_size = 5000
worker_threads = 8
gpu_acceleration_enabled = true

[alerts]
# Email alerting configuration
email_enabled = true
email_smtp_server = "smtp.gmail.com"
email_smtp_port = 587
email_username = "alerts@ultra-siem.com"
email_password = "${ULTRA_SIEM_EMAIL_PASSWORD}"
email_from = "Ultra SIEM Alerts <alerts@ultra-siem.com>"
email_to = [
    "admin@company.com",
    "security@company.com",
    "soc@company.com"
]
email_tls_enabled = true
email_timeout_seconds = 30

# Webhook alerting configuration
webhook_enabled = true
webhook_urls = [
    "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
    "https://company.webhook.office.com/webhookb2/YOUR/TEAMS/WEBHOOK"
]
webhook_timeout_seconds = 10
webhook_retry_attempts = 3
webhook_retry_delay_ms = 1000

# Grafana alerting configuration
grafana_enabled = true
grafana_url = "http://localhost:3000"
grafana_api_key = "${ULTRA_SIEM_GRAFANA_API_KEY}"
grafana_dashboard_id = "ultra-siem-dashboard"
grafana_panel_id = "threat-panel"
grafana_timeout_seconds = 15

# Slack integration
slack_enabled = true
slack_webhook_url = "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
slack_channel = "#security-alerts"
slack_username = "Ultra SIEM"
slack_icon_emoji = ":warning:"
slack_timeout_seconds = 10

# Microsoft Teams integration
teams_enabled = false
teams_webhook_url = "https://company.webhook.office.com/webhookb2/YOUR/TEAMS/WEBHOOK"
teams_timeout_seconds = 10

# PagerDuty integration
pagerduty_enabled = false
pagerduty_api_key = "${ULTRA_SIEM_PAGERDUTY_API_KEY}"
pagerduty_service_id = "P123456"
pagerduty_timeout_seconds = 15

# Custom webhook configuration
custom_webhooks = [
    {
        name = "Security Team Webhook"
        url = "https://security.company.com/webhook"
        headers = {
            "Authorization" = "Bearer ${ULTRA_SIEM_CUSTOM_WEBHOOK_TOKEN}"
            "Content-Type" = "application/json"
        }
        timeout_seconds = 10
        enabled = true
    }
]

[response_rules]
# Critical threat auto-block rule
[[response_rules.critical_auto_block]]
id = "critical_threat_auto_block"
name = "Auto-block Critical Threats"
description = "Automatically block IPs for critical threats"
enabled = true
priority = 1
cooldown_seconds = 300

[[response_rules.critical_auto_block.conditions]]
field = "severity"
operator = "equals"
value = "Critical"
case_sensitive = false

[[response_rules.critical_auto_block.conditions]]
field = "confidence"
operator = "greater_than"
value = "0.8"
case_sensitive = false

[[response_rules.critical_auto_block.actions]]
type = "block_ip"
ip = "{source_ip}"
duration_seconds = 3600
reason = "Critical threat detected"

[[response_rules.critical_auto_block.actions]]
type = "send_email"
to = ["admin@company.com", "security@company.com"]
subject = "Critical Threat Detected and Blocked"
body = "A critical threat has been detected from {source_ip} and automatically blocked for 1 hour."

[[response_rules.critical_auto_block.actions]]
type = "webhook_notification"
url = "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
payload = {
    "text" = "üö® Critical threat detected from {source_ip}",
    "severity" = "Critical",
    "action" = "IP blocked for 1 hour"
}

# Brute force response rule
[[response_rules.brute_force_response]]
id = "brute_force_response"
name = "Brute Force Response"
description = "Respond to brute force attacks"
enabled = true
priority = 2
cooldown_seconds = 600

[[response_rules.brute_force_response.conditions]]
field = "category"
operator = "equals"
value = "BruteForce"
case_sensitive = false

[[response_rules.brute_force_response.conditions]]
field = "confidence"
operator = "greater_than"
value = "0.7"
case_sensitive = false

[[response_rules.brute_force_response.actions]]
type = "block_ip"
ip = "{source_ip}"
duration_seconds = 1800
reason = "Brute force attack detected"

[[response_rules.brute_force_response.actions]]
type = "disable_account"
user_id = "{user_id}"
reason = "Brute force attack detected"

[[response_rules.brute_force_response.actions]]
type = "send_email"
to = ["security@company.com"]
subject = "Brute Force Attack Detected"
body = "Brute force attack detected from {source_ip} targeting user {user_id}. IP blocked and account disabled."

# Data exfiltration alert rule
[[response_rules.data_exfiltration]]
id = "data_exfiltration_alert"
name = "Data Exfiltration Alert"
description = "Alert on potential data exfiltration"
enabled = true
priority = 3
cooldown_seconds = 900

[[response_rules.data_exfiltration.conditions]]
field = "category"
operator = "equals"
value = "DataExfiltration"
case_sensitive = false

[[response_rules.data_exfiltration.actions]]
type = "send_email"
to = ["admin@company.com", "security@company.com", "legal@company.com"]
subject = "Data Exfiltration Attempt Detected"
body = "Potential data exfiltration detected from {source_ip} by user {user_id}. Immediate investigation required."

[[response_rules.data_exfiltration.actions]]
type = "webhook_notification"
url = "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
payload = {
    "text" = "‚ö†Ô∏è Data exfiltration attempt detected",
    "severity" = "High",
    "source_ip" = "{source_ip}",
    "user_id" = "{user_id}"
}

# Malware detection rule
[[response_rules.malware_detection]]
id = "malware_detection"
name = "Malware Detection Response"
description = "Respond to malware detection"
enabled = true
priority = 2
cooldown_seconds = 600

[[response_rules.malware_detection.conditions]]
field = "category"
operator = "equals"
value = "Malware"
case_sensitive = false

[[response_rules.malware_detection.actions]]
type = "quarantine_file"
file_path = "{file_path}"
hash = "{file_hash}"
reason = "Malware detected"

[[response_rules.malware_detection.actions]]
type = "kill_process"
process_id = "{process_id}"
reason = "Malware process detected"

[[response_rules.malware_detection.actions]]
type = "send_email"
to = ["security@company.com"]
subject = "Malware Detected and Contained"
body = "Malware detected in file {file_path}. File quarantined and process terminated."

# SQL injection response rule
[[response_rules.sql_injection]]
id = "sql_injection_response"
name = "SQL Injection Response"
description = "Respond to SQL injection attempts"
enabled = true
priority = 2
cooldown_seconds = 600

[[response_rules.sql_injection.conditions]]
field = "category"
operator = "equals"
value = "SQLInjection"
case_sensitive = false

[[response_rules.sql_injection.actions]]
type = "block_ip"
ip = "{source_ip}"
duration_seconds = 3600
reason = "SQL injection attempt detected"

[[response_rules.sql_injection.actions]]
type = "restart_service"
service_name = "web-server"
reason = "SQL injection attempt detected"

[[response_rules.sql_injection.actions]]
type = "send_email"
to = ["admin@company.com", "security@company.com"]
subject = "SQL Injection Attempt Detected"
body = "SQL injection attempt detected from {source_ip}. IP blocked and web server restarted."

# DDoS attack response rule
[[response_rules.ddos_response]]
id = "ddos_response"
name = "DDoS Attack Response"
description = "Respond to DDoS attacks"
enabled = true
priority = 1
cooldown_seconds = 300

[[response_rules.ddos_response.conditions]]
field = "category"
operator = "equals"
value = "DDoS"
case_sensitive = false

[[response_rules.ddos_response.actions]]
type = "block_ip"
ip = "{source_ip}"
duration_seconds = 7200
reason = "DDoS attack detected"

[[response_rules.ddos_response.actions]]
type = "custom_script"
script_path = "/opt/ultra-siem/scripts/activate_ddos_protection.sh"
args = ["{source_ip}", "7200"]
reason = "DDoS protection activated"

[[response_rules.ddos_response.actions]]
type = "send_email"
to = ["admin@company.com", "security@company.com", "network@company.com"]
subject = "DDoS Attack Detected"
body = "DDoS attack detected from {source_ip}. IP blocked and DDoS protection activated."

[soar_integration]
# SOAR platform configuration
enabled = false
platform = "splunk_phantom"  # Options: splunk_phantom, demisto, swimlane, custom
api_url = "https://phantom.company.com/rest"
api_key = "${ULTRA_SIEM_SOAR_API_KEY}"
timeout_seconds = 30
retry_attempts = 3
retry_delay_ms = 1000

# Custom headers for SOAR integration
[soar_integration.headers]
Authorization = "Bearer ${ULTRA_SIEM_SOAR_API_KEY}"
Content-Type = "application/json"
User-Agent = "Ultra SIEM/1.0"

# SOAR playbook configuration
[soar_integration.playbooks]
critical_threat_playbook = "Ultra SIEM Critical Threat Response"
brute_force_playbook = "Ultra SIEM Brute Force Response"
malware_playbook = "Ultra SIEM Malware Response"
data_exfiltration_playbook = "Ultra SIEM Data Exfiltration Response"

[incident_management]
# Incident lifecycle configuration
auto_escalation_enabled = true
escalation_threshold_minutes = 30
max_escalation_level = 5

# SLA configuration
sla_configuration = {
    "Critical" = 15,    # minutes
    "High" = 60,        # minutes
    "Medium" = 240,     # minutes
    "Low" = 1440        # minutes
}

# Assignment configuration
auto_assignment_enabled = true
assignment_rules = [
    {
        condition = "severity = Critical"
        assign_to = "security-team"
        priority = 1
    },
    {
        condition = "category = Malware"
        assign_to = "malware-team"
        priority = 2
    },
    {
        condition = "category = DDoS"
        assign_to = "network-team"
        priority = 2
    }
]

# False positive handling
false_positive_handling = {
    enabled = true
    auto_whitelist_enabled = true
    whitelist_review_required = true
    review_period_days = 7
}

[performance]
# Performance monitoring configuration
metrics_enabled = true
metrics_export_interval_seconds = 60
metrics_retention_days = 30

# Response time thresholds
response_time_thresholds = {
    "critical" = 1000,    # ms
    "high" = 2000,        # ms
    "medium" = 5000,      # ms
    "low" = 10000         # ms
}

# Alert delivery monitoring
alert_delivery_monitoring = {
    enabled = true
    timeout_threshold_ms = 5000
    retry_failed_alerts = true
    max_retry_attempts = 3
}

[security]
# Security configuration
authentication_enabled = true
authorization_enabled = true
audit_logging_enabled = true
data_encryption_enabled = true

# API security
api_security = {
    rate_limiting_enabled = true
    max_requests_per_minute = 1000
    api_key_required = true
    cors_enabled = false
}

# Data protection
data_protection = {
    pii_detection_enabled = true
    data_masking_enabled = true
    retention_policy_enabled = true
    encryption_at_rest = true
    encryption_in_transit = true
}

[compliance]
# Compliance configuration
compliance_standards = ["SOC2", "GDPR", "HIPAA", "PCI-DSS"]

# Audit logging
audit_logging = {
    enabled = true
    log_level = "info"
    retention_days = 365
    encryption_enabled = true
    events_to_log = [
        "incident_created",
        "incident_updated",
        "response_action_executed",
        "alert_sent",
        "user_login",
        "user_logout",
        "configuration_changed"
    ]
}

# Data retention
data_retention = {
    incidents_days = 365
    alerts_days = 90
    response_actions_days = 180
    audit_logs_days = 365
    performance_metrics_days = 30
}

[monitoring]
# Health monitoring
health_monitoring = {
    enabled = true
    check_interval_seconds = 30
    alert_on_failure = true
}

# Component monitoring
component_monitoring = {
    email_service = true
    webhook_service = true
    grafana_service = true
    soar_service = true
    database_service = true
}

# Performance alerts
performance_alerts = {
    high_response_time_enabled = true
    high_response_time_threshold_ms = 5000
    high_cpu_usage_enabled = true
    high_cpu_usage_threshold_percent = 80
    high_memory_usage_enabled = true
    high_memory_usage_threshold_percent = 85
}

[backup]
# Backup configuration
backup_enabled = true
backup_interval_hours = 24
backup_retention_days = 30
backup_encryption_enabled = true

# Backup locations
backup_locations = [
    "/opt/ultra-siem/backups/local",
    "s3://ultra-siem-backups/incident-response"
]

[maintenance]
# Maintenance configuration
maintenance_window_enabled = true
maintenance_window_start = "02:00"
maintenance_window_duration_hours = 2
maintenance_window_timezone = "UTC"

# Maintenance tasks
maintenance_tasks = [
    "cleanup_expired_blocks",
    "cleanup_expired_accounts",
    "cleanup_old_incidents",
    "cleanup_old_alerts",
    "optimize_database",
    "update_whitelists"
] 